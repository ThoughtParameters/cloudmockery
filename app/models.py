"""
SQLModel definitions for database tables.

This module contains the class definitions for all database models, which
SQLModel uses to interact with the database tables.
"""
from typing import Optional, List
from sqlalchemy import UniqueConstraint
from sqlmodel import Field, SQLModel, Relationship

class VirtualMachine(SQLModel, table=True):
    __table_args__ = (UniqueConstraint("name", "resource_group", name="unique_vm_in_rg"),)
    """
    Represents a virtual machine resource in the database.
    """
    # The primary key for the table, automatically generated by the database.
    id: Optional[int] = Field(default=None, primary_key=True)

    # The name of the virtual machine. It is indexed for faster lookups.
    name: str = Field(index=True)

    # The name of the resource group the VM belongs to. Also indexed.
    resource_group: str = Field(index=True)

    # The Azure region where the VM is located.
    location: str

    # The size of the virtual machine (e.g., "Standard_D2s_v3").
    vm_size: str

    # The provisioning state of the resource (e.g., "Succeeded", "Failed").
    provisioning_state: str = "Succeeded"


class Subnet(SQLModel, table=True):
    """Represents a subnet within a virtual network."""
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    address_prefix: str

    # Foreign key to the VirtualNetwork table
    virtual_network_id: Optional[int] = Field(default=None, foreign_key="virtualnetwork.id")
    # The back-populating relationship to the VirtualNetwork model
    virtual_network: "VirtualNetwork" = Relationship(back_populates="subnets")


class VirtualNetwork(SQLModel, table=True):
    __table_args__ = (UniqueConstraint("name", "resource_group", name="unique_vnet_in_rg"),)
    """Represents a virtual network resource in the database."""
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    resource_group: str = Field(index=True)
    location: str
    address_space: str

    # The one-to-many relationship to subnets
    subnets: List["Subnet"] = Relationship(back_populates="virtual_network")


class StorageAccount(SQLModel, table=True):
    __table_args__ = (UniqueConstraint("name", "resource_group", name="unique_sa_in_rg"),)
    """Represents a storage account resource in the database."""
    id: Optional[int] = Field(default=None, primary_key=True)
    name: str = Field(index=True)
    resource_group: str = Field(index=True)
    location: str
    sku: str  # e.g., "Standard_LRS", "Premium_LRS"
    kind: str  # e.g., "StorageV2", "BlobStorage"
